{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["SwimmingPool","React","Component","useImage","process","image","x","window","innerWidth","poolWidth","y","width","height","innerHeight","Duck","moveX","moveY","duckWidth","duckHeight","App","props","state","duckKeyboardMove","bind","duckGoFoward","document","addEventListener","e","setInterval","this","removeEventListener","console","log","keyCode","setState","Boolean","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"uUA+BMA,GAxBoBC,IAAMC,UAwBX,WAAO,IAAD,EACTC,IAAS,GAAD,OAAIC,oBAAJ,uBAAjBC,EADkB,oBAGzB,OAAO,kBAAC,QAAD,CACLA,MAAOA,EACPC,EAAGC,OAAOC,WAAa,EAAIC,IAC3BC,EAAG,EACHC,MALgB,IAMhBC,OAAQL,OAAOM,gBAIbC,EAAO,SAAC,GAA8B,IAAD,IAA3BC,aAA2B,MAAnB,EAAmB,MAAhBC,aAAgB,MAAR,EAAQ,IACzBb,IAAS,GAAD,OAAIC,oBAAJ,+BAAjBC,EADkC,oBAIzC,OAAO,kBAAC,QAAD,CACLA,MAAOA,EACPM,MAJgB,IAKhBC,OAJiB,IAKjBN,EAAGC,OAAOC,WAAa,EAAIS,GAAgBF,EAC3CL,EAAGH,OAAOM,YAAc,EAAIK,IAAoBF,KAmErCG,E,YA7Db,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXN,MAAO,EACPC,MAAO,GAGT,EAAKM,iBAAmB,EAAKA,iBAAiBC,KAAtB,gBACxB,EAAKC,aAAe,EAAKA,aAAaD,KAAlB,gBARH,E,iFAWE,IAAD,OAElBE,SAASC,iBAAiB,QAAS,SAACC,GAClC,EAAKL,iBAAiBK,KAGxBC,YAAYC,KAAKL,aAAa,O,2CAGV,IAAD,OACnBC,SAASK,oBAAoB,QAAS,SAACH,GACrC,EAAKL,iBAAiBK,O,uCAITA,GAAI,IACbZ,EAAUc,KAAKR,MAAfN,OACNgB,QAAQC,IAAIL,GACM,KAAdA,EAAEM,SAAgC,KAAdN,EAAEM,WAKxBlB,GAAS,IAJoB,KAAdY,EAAEM,QAAiB,GAAK,IAMzCJ,KAAKK,SAAS,CAAEnB,Y,qCAGF,IACRC,EAAUa,KAAKR,MAAfL,MACNA,GAAO,GACPa,KAAKK,SAAS,CAAClB,Y,+BAOf,OACE,kBAAC,QAAD,CAAOL,MAAOJ,OAAOC,WAAYI,OAAQL,OAAOM,aAC9C,kBAAC,QAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAME,MAAOc,KAAKR,MAAMN,MAAOC,MAAOa,KAAKR,MAAML,c,GAvDzCd,aC5CEiC,QACW,cAA7B5B,OAAO6B,SAASC,UAEe,UAA7B9B,OAAO6B,SAASC,UAEhB9B,OAAO6B,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASf,SAASgB,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.f9ef50aa.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport { Stage, Layer, Rect, Text, Image, Group } from 'react-konva';\r\nimport Konva from 'konva';\r\nimport useImage from 'use-image';\r\n\r\n\r\n\r\nclass ColoredRect extends React.Component {\r\n  state = {\r\n    color: 'green'\r\n  };\r\n  handleClick = () => {\r\n    this.setState({\r\n      color: Konva.Util.getRandomColor()\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <Rect\r\n        x={20}\r\n        y={20}\r\n        width={50}\r\n        height={50}\r\n        fill={this.state.color}\r\n        shadowBlur={5}\r\n        onClick={this.handleClick}\r\n      />\r\n    );\r\n  }\r\n}\r\n\r\nconst SwimmingPool = () => {\r\n  const [image] = useImage(`${process.env.PUBLIC_URL}/images/img_BG.png`);\r\n  const poolWidth = 750;\r\n  return <Image\r\n    image={image}\r\n    x={window.innerWidth / 2 - poolWidth / 2}\r\n    y={0}\r\n    width={poolWidth}\r\n    height={window.innerHeight}\r\n  />;\r\n};\r\n\r\nconst Duck = ({ moveX = 0, moveY = 0 }) => {\r\n  const [image] = useImage(`${process.env.PUBLIC_URL}/images/duck_normal_01.png`);\r\n  const duckWidth = 180;\r\n  const duckHeight = 160;\r\n  return <Image\r\n    image={image}\r\n    width={duckWidth}\r\n    height={duckHeight}\r\n    x={window.innerWidth / 2 - duckWidth / 2 + moveX}\r\n    y={window.innerHeight / 2 + duckHeight * 1.25 + moveY}\r\n  />\r\n}\r\n\r\nclass App extends Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      moveX: 0,\r\n      moveY: 0\r\n    }\r\n\r\n    this.duckKeyboardMove = this.duckKeyboardMove.bind(this);\r\n    this.duckGoFoward = this.duckGoFoward.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    // window.addEventListener(keyu)\r\n    document.addEventListener('keyup', (e) => {\r\n      this.duckKeyboardMove(e)\r\n    });\r\n\r\n    setInterval(this.duckGoFoward,1000);\r\n  }\r\n\r\n  componentWillMount() {\r\n    document.removeEventListener('keyup', (e) => {\r\n      this.duckKeyboardMove(e)\r\n    });\r\n  }\r\n\r\n  duckKeyboardMove(e) {\r\n    let { moveX } = this.state;\r\n    console.log(e);\r\n    if (e.keyCode === 39 || e.keyCode === 37) {\r\n      let position = e.keyCode === 39 ? 1 : -1;\r\n      // 檢核是否超出游泳池\r\n      // if (user.x >= 620 && position === 1) return; // 右邊界\r\n      // if (user.x <= 180 && position === -1) return; // 左邊界\r\n      moveX += 50 * position;\r\n    }\r\n    this.setState({ moveX });\r\n  }\r\n\r\n  duckGoFoward() {\r\n    let { moveY } = this.state;\r\n    moveY-=80;\r\n    this.setState({moveY});\r\n  }\r\n\r\n  render() {\r\n    // Stage is a div container\r\n    // Layer is actual canvas element (so you may have several canvases in the stage)\r\n    // And then we have canvas shapes inside the Layer\r\n    return (\r\n      <Stage width={window.innerWidth} height={window.innerHeight}>\r\n        <Layer>\r\n          <SwimmingPool />\r\n          <Duck moveX={this.state.moveX} moveY={this.state.moveY}/>\r\n        </Layer>\r\n\r\n      </Stage>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}